{{- if eq (int .Values.executionMode) 2 }}
{{- if ne (int .Values.signature) 0}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-firmas
  namespace: {{ .Values.namespace }}
spec:
  {{- if hasKey .Values.services.firmas "replicas" }}
  replicas:  {{ .Values.services.firmas.replicas }}
  {{- else }}
  replicas: {{.Values.replicas}}
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-firmas
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-firmas
    spec:
      containers:
          - env:
            - name: JAVA_OPTS
              value: "-XX:MaxRAMPercentage=75.0 -XX:MinRAMPercentage=50.0 -Dspring.config.location=/config/application.yml "
            - name: server.port
              value: "{{ .Values.services.firmas.port }}"
            - name: spring.datasource.url
              value: "{{ .Values.environment.database.url }}{{if eq .Values.environment.database.type "mysql"}}{{.Values.environment.database.signatureUsername | b64dec}}?useUnicode=true{{end}}"
            {{- if eq .Values.environment.database.type "oracle" }}
            - name: spring.datasource.driver-class-name
              value: "oracle.jdbc.OracleDriver"
            - name: spring.jpa.database-platform
              value: "org.hibernate.dialect.Oracle12cDialect"
            - name: spring.jpa.properties.hibernate.dialect
              value: "org.hibernate.dialect.Oracle12cDialect"
            {{- else if eq .Values.environment.database.type "mysql" }}
            - name: spring.datasource.driver-class-name
              value: "com.mysql.cj.jdbc.Driver"
            - name: spring.jpa.database-platform
              value: "org.hibernate.dialect.MySQL5InnoDBDialect"
            - name: spring.jpa.properties.hibernate.dialect
              value: "org.hibernate.dialect.MySQL5InnoDBDialect"
            {{- end }}
            - name: keycloak.config.number
              value: "{{ .Values.environment.keycloak.securityOpt }}"
            - name: keycloak.auth-server-url
              value: {{ .Values.environment.keycloak.url }}
            - name: keycloak.realm
              value: {{ .Values.environment.keycloak.realm }}
            - name: spring.mvc.locale-resolver
              value: {{ .Values.environment.backend.resolver }}
            - name: spring.mvc.locale
              value: {{ .Values.environment.backend.locale }}
            - name: config.keycloak.username
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: keycloakAdminUsername
            - name: config.keycloak.password
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: keycloakAdminPassword
            - name: config.personInterface
              value: "{{ .Values.environment.backend.personInterface }}"
            - name: config.savePersonURL
              value: {{ .Values.environment.backend.personUrl }}/service/person-data/person/savePerson
            - name: config.updatePersonURL
              value: {{ .Values.environment.backend.personUrl }}/service/person-data/person/updatePerson
            - name: config.getPersonURL
              value: {{ .Values.environment.backend.personUrl }}/service/person-data/person/getPerson
            - name: config.mailResetPass
              value: "{{ .Values.environment.backend.mailResetPass }}"
            - name: config.validUserMove
              value: "{{ .Values.environment.backend.validUserMove }}"
            - name: spring.datasource.username
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: signatureUsername
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: signaturePassword
            - name: keycloak.resource
              value: {{ .Values.environment.keycloak.signature.resource }}
            - name: keycloak.credentials.secret
              value: {{ .Values.environment.keycloak.signature.secret }}
            - name: spring.jpa.properties.org.hibernate.envers.default_schema
              value: {{ .Values.environment.database.audScheme }}
            - name: spring.jpa.properties.org.hibernate.envers.default_catalog
              value: {{ .Values.environment.database.audScheme }}
            - name: logging.level.org.hibernate.type.descriptor.sql.BasicBinder
              value: {{ .Values.environment.database.sqlBasicBinder }}
            - name: spring.jpa.properties.hibernate.format_sql
              value: "{{ .Values.environment.database.formatSql }}"
            - name: spring.jpa.show-sql
              value: "{{ .Values.environment.database.showSql }}"
            - name: config.ambiente
              value: {{ .Values.environment.keycloak.realm }}
            - name: minio.server
              value: {{ .Values.environment.backend.minioUrl }}
            - name: minio.timeout
              value: "{{ .Values.environment.backend.minioTimeout }}"
            - name: minio.username
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: minioUser
            - name: minio.password
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: minioPassword
            - name: spring.liquibase.enable
              value: "{{ .Values.liquibaseEnable }}"
            - name: spring.liquibase.contexts
              value: "{{ .Values.liquibaseContext }}{{- if .Values.liquibaseInit }},init{{- end }}"
            image: {{.Values.services.registry }}{{.Values.services.firmas.image}}:{{.Values.services.firmas.tag }}
            imagePullPolicy: IfNotPresent
            {{- if and (hasKey .Values.services.firmas "actuator") (eq (int .Values.actuator) 1) }}
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: {{ .Values.services.firmas.actuator.url }}/health
                port: {{ .Values.services.firmas.port }}
                scheme: HTTP
              initialDelaySeconds: {{ .Values.services.firmas.actuator.delay | default .Values.services.actuatorDelay}}
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 1
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: {{.Values.services.firmas.actuator.url }}/health/readiness
                port: {{ .Values.services.firmas.port }}
                scheme: HTTP
              periodSeconds: 10
              successThreshold: 3
              timeoutSeconds: 1
            {{- end }}
            name: {{ .Release.Name }}-firmas
            ports:
            - containerPort: 2114
              protocol: TCP
            resources:
              limits:
                memory: {{.Values.services.firmas.memoryLimit | default "800Mi" }}
              requests:
                memory: {{.Values.services.firmas.memoryLimit | default "800Mi" }}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /config/
              name: keycloak-conf
      dnsPolicy: ClusterFirst
      {{- if hasKey .Values.services "secretRegistry"}}
      imagePullSecrets:
      - name: {{.Values.services.secretRegistry}}
      {{- end }}
      {{- if .Values.istio.ssl.develop }}
      hostAliases:
        - ip: {{.Values.istio.ssl.ip}}
          hostnames:
            - {{.Values.istio.ssl.appHost}}
            - {{.Values.istio.ssl.keycloakHost}}
      {{- end }}
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: firmas-application.yml
            path: application.yml
          name: firmas-application
        name: keycloak-conf
  {{- end }}
  {{- end }}