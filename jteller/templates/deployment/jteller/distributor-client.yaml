{{- if ne (int .Values.executionMode) 0 }}
{{- if and (ne (int .Values.distributor) 0) (ne (int .Values.distributor) 1) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-distributor-client
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.services.distributorClient.replicas | default .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-distributor-client
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-distributor-client
    spec:
      initContainers:
        - name: liquibase-executor
          image: vasquezfernando/liquibase:1.0.6.3
          imagePullPolicy: IfNotPresent
          env:
            - name: liquibase.datasources.default.change-log
              value: classpath:db/distributor/client/{{.Values.environment.database.type}}/db.changelog-master.xml
            - name: datasources.default.url
              value: "{{ .Values.environment.database.url }}{{if eq .Values.environment.database.type "mysql"}}{{.Values.environment.database.logdatUsername | b64dec}}?useUnicode=true{{end}}"
            - name: liquibase.datasources.defaul.enabled
              value: "{{ .Values.liquibaseEnable }}"
            - name: liquibase.datasources.defaul.contexts
              value: "{{ .Values.liquibaseContext }}{{- if .Values.liquibaseInit }},init{{- end }}"
            - name: datasources.default.username
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: clientUsername
            - name: datasources.default.password
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: clientPassword
            {{- if eq .Values.environment.database.type "oracle" }}
            - name: datasources.default.driver-class-name
              value: "oracle.jdbc.OracleDriver"
            - name: spring.jpa.database-platform
            {{- else if eq .Values.environment.database.type "mysql" }}
            - name: datasources.default.driver-class-name
              value: "com.mysql.cj.jdbc.Driver"
            {{- end }}
      containers:
      - name: {{ .Release.Name }}-distributor-client
        image: {{ .Values.services.registry }}{{ .Values.services.distributorClient.image }}:{{ .Values.services.distributorClient.tag }}
        imagePullPolicy: IfNotPresent
        env:
        - name: JAVA_OPTS
          value: "-XX:MaxRAMPercentage=75.0 -XX:MinRAMPercentage=50.0"
        - name: server.port
          value: "{{ .Values.services.distributor.port }}"
        {{- if eq .Values.environment.database.type "oracle" }}
        - name: spring.datasource.driver-class-name
          value: "oracle.jdbc.OracleDriver"
        - name: spring.jpa.database-platform
          value: "org.hibernate.dialect.Oracle12cDialect"
        - name: spring.jpa.properties.hibernate.dialect
          value: "org.hibernate.dialect.Oracle12cDialect"
        {{- else if eq .Values.environment.database.type "mysql" }}
        - name: spring.datasource.driver-class-name
          value: "com.mysql.cj.jdbc.Driver"
        - name: spring.jpa.database-platform
          value: "org.hibernate.dialect.MySQL5InnoDBDialect"
        - name: spring.jpa.properties.hibernate.dialect
          value: "org.hibernate.dialect.MySQL5InnoDBDialect"
        {{- end }}
        - name: spring.datasource.url
          value: "{{ .Values.environment.database.url }}{{if eq .Values.environment.database.type "mysql"}}{{.Values.environment.database.clientUsername | b64dec}}?useUnicode=true{{end}}"
        - name: spring.datasource.username
          valueFrom:
            secretKeyRef:
              name: general-secret
              key: clientUsername
        - name: spring.datasource.password
          valueFrom:
            secretKeyRef:
              name: general-secret
              key: clientPassword
        - name: config.distCore
          value: "{{ .Values.environment.backend.distributorUrl }}"
        - name: spring.jpa.properties.org.hibernate.envers.default_schema
          value: {{ .Values.environment.database.audScheme }}
        - name: spring.jpa.properties.org.hibernate.envers.default_catalog
          value: {{ .Values.environment.database.audScheme }}
        - name: config.credentials.securityClient
          value: "{{ .Values.environment.backend.securityClient }}"
        - name: config.credentials.securityCore
          value: "{{ .Values.environment.backend.securityCore }}"
        - name: config.credentials.userClient
          valueFrom:
            secretKeyRef:
              name: general-secret
              key: userclient
        - name: config.credentials.passClient
          valueFrom:
            secretKeyRef:
              name: general-secret
              key: passclient
        - name: config.credentials.userCore
          valueFrom:
            secretKeyRef:
              name: general-secret
              key: usercore
        - name: config.credentials.passCore
          valueFrom:
            secretKeyRef:
              name: general-secret
              key: passcore
        - name: config.credentials.realmCore
          value: "{{ .Values.environment.keycloak.realmInHeader }}"
        - name: config.credentials.realmClient
          value: "{{ .Values.environment.keycloak.realmInHeader }}"
        - name: keycloak.realm
          value: "{{ .Values.environment.keycloak.realm }}"
        - name: keycloak.auth-server-url
          value: "{{ .Values.environment.keycloak.url }}"
        - name: keycloak.credentials.secret
          value: "{{ .Values.environment.keycloak.distributor.secret }}"
        - name: minio.url
          value: "{{ .Values.environment.backend.minioUrl }}"
        - name: config.path-kubect
          value: "/kubeconf/config"
        - name: config.namespace
          value: "{{ .Values.namespace }}"
        - name: spring.jpa.properties.hibernate.format_sql
          value: "{{ .Values.environment.database.formatSql }}"
        - name: spring.jpa.show-sql
          value: "{{ .Values.environment.database.showSql }}"
        - name: logging.level.org.hibernate.type.descriptor.sql.BasicBinder
          value: "{{ .Values.environment.database.sqlBasicBinder }}"
        - name: spring.liquibase.enable
          value: "false"
        - name: migration.enabled
          value: "false"
        - name: spring.liquibase.contexts
          value: "{{ .Values.liquibaseContext }}"
        - name: migration.context
          value: "{{ .Values.liquibaseContext }}"
        ports:
        - containerPort: {{ .Values.services.distributorClient.port }}
          protocol: TCP
        resources:
          limits:
            memory: {{ .Values.services.distributorClient.memoryLimit | default "756Mi" }}
          requests:
            memory: {{ .Values.services.distributorClient.memoryLimit | default "756Mi" }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /kubeconf/
          name: kube-conf-vol
        {{- if and (hasKey .Values.services.distributorClient "actuator") (eq (int .Values.actuator) 1) }}
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: {{.Values.services.distributorClient.actuator.url }}/health
            port: {{ .Values.services.distributorClient.port }}
            scheme: HTTP
          initialDelaySeconds: {{ .Values.services.distributorClient.actuator.delay | default .Values.services.actuatorDelay}}
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: {{ .Values.services.distributorClient.actuator.url }}/health/readiness
            port: {{ .Values.services.distributorClient.port }}
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 1
        {{- end }}
      dnsPolicy: ClusterFirst
      {{- if hasKey .Values.services "secretRegistry"}}
      imagePullSecrets:
      - name: {{.Values.services.secretRegistry}}
      {{- end }}
      {{- if .Values.istio.ssl.develop }}
      hostAliases:
        - ip: {{.Values.istio.ssl.ip}}
          hostnames:
            - {{.Values.istio.ssl.appHost}}
            - {{.Values.istio.ssl.keycloakHost}}
      {{- end }}
      volumes:
      - name: kube-conf-vol
        configMap:
          defaultMode: 420
          items:
          - key: config
            path: config
          name: kubeconf-configmap
  {{- end }}
  {{- end }}