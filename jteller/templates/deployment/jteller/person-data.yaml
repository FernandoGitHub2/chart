{{- if eq (int .Values.executionMode) 2 }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Release.Name}}-person-data-service
  namespace: {{ .Values.namespace }}
spec:
  {{- if hasKey .Values.services.personData "replicas" }}
  replicas:  {{ .Values.services.personData.replicas }}
  {{- else }}
  replicas: {{.Values.replicas}}
  {{- end }}
  selector:
    matchLabels:
      app: {{.Release.Name}}-person-data-service
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{.Release.Name}}-person-data-service
    spec:
      initContainers:
        - name: liquibase-executor
          image: vasquezfernando/liquibase:1.0.6.5
          imagePullPolicy: IfNotPresent
          env:
            - name: liquibase.datasources.default.change-log
              value: classpath:db/person/data/{{.Values.environment.database.type}}/db.changelog-master.xml
            - name: datasources.default.url
              value: "{{ .Values.environment.database.url }}{{if eq .Values.environment.database.type "mysql"}}{{.Values.environment.database.personDataUsername | b64dec}}?useUnicode=true{{end}}"
            - name: liquibase.datasources.defaul.enabled
              value: "{{ .Values.liquibaseEnable }}"
            - name: liquibase.datasources.defaul.contexts
              value: "{{ .Values.liquibaseContext }}{{- if .Values.liquibaseInit }},init{{- end }}"
            - name: datasources.default.username
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: personDataUsername
            - name: datasources.default.password
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: personDataPassword
            {{- if eq .Values.environment.database.type "oracle" }}
            - name: datasources.default.driver-class-name
              value: "oracle.jdbc.OracleDriver"
            - name: spring.jpa.database-platform
            {{- else if eq .Values.environment.database.type "mysql" }}
            - name: datasources.default.driver-class-name
              value: "com.mysql.cj.jdbc.Driver"
            {{- end }}
      containers:
        - env:
            - name: JAVA_OPTS
              value: '-XX:MaxRAMPercentage=75.0 -XX:MinRAMPercentage=50.0 -Dspring.config.import=optional:configmap:/config/application.yml '
            - name: server.port
              value: "{{ .Values.services.personData.port }}"
            - name: spring.datasource.url
              value: "{{ .Values.environment.database.url }}{{if eq .Values.environment.database.type "mysql"}}{{.Values.environment.database.personDataUsername | b64dec }}?useUnicode=true{{end}}"
            {{- if eq .Values.environment.database.type "oracle" }}
            - name: spring.datasource.driver-class-name
              value: "oracle.jdbc.OracleDriver"
            - name: spring.jpa.database-platform
              value: "org.hibernate.dialect.Oracle12cDialect"
            - name: spring.jpa.properties.hibernate.dialect
              value: "org.hibernate.dialect.Oracle12cDialect"
            {{- else if eq .Values.environment.database.type "mysql" }}
            - name: spring.datasource.driver-class-name
              value: "com.mysql.cj.jdbc.Driver"
            - name: spring.jpa.database-platform
              value: "org.hibernate.dialect.MySQL5InnoDBDialect"
            - name: spring.jpa.properties.hibernate.dialect
              value: "org.hibernate.dialect.MySQL5InnoDBDialect"
            {{- end }}
            - name: keycloak.config.number
              value: "{{ .Values.environment.keycloak.securityOpt }}"
            - name: keycloak.auth-server-url
              value: {{ .Values.environment.keycloak.url }}
            - name: keycloak.realm
              value: {{ .Values.environment.keycloak.realm }}
            - name: spring.mvc.locale-resolver
              value: {{ .Values.environment.backend.resolver }}
            - name: spring.mvc.locale
              value: {{ .Values.environment.backend.locale }}
            - name: config.keycloak.username
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: keycloakAdminUsername
            - name: config.keycloak.password
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: keycloakAdminPassword
            - name: config.distEnable
              value: "{{- if eq (int .Values.distributor) 1 }}1{{- else }}0{{- end}}"
            - name: config.mailResetPass
              value: "{{ .Values.environment.backend.mailResetPass }}"
            - name: config.validUserMove
              value: "{{ .Values.environment.backend.validUserMove }}"
            - name: spring.datasource.username
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: personDataUsername
            - name: spring.datasource.password
              valueFrom:
                secretKeyRef:
                  name: general-secret
                  key: personDataPassword
            - name: keycloak.resource
              value: {{ .Values.environment.keycloak.configuration.resource }}
            - name: keycloak.credentials.secret
              value: {{ .Values.environment.keycloak.configuration.secret }}
            - name: spring.jpa.properties.org.hibernate.envers.default_schema
              value: {{ .Values.environment.database.audScheme }}
            - name: spring.jpa.properties.org.hibernate.envers.default_catalog
              value: {{ .Values.environment.database.audScheme }}
            - name: logging.level.org.hibernate.type.descriptor.sql.BasicBinder
              value: {{ .Values.environment.database.sqlBasicBinder }}
            - name: spring.jpa.properties.hibernate.format_sql
              value: "{{ .Values.environment.database.formatSql }}"
            - name: spring.jpa.show-sql
              value: "{{ .Values.environment.database.showSql }}"
            - name: config.ambiente
              value: {{ .Values.environment.keycloak.realm }}
            - name: spring.liquibase.enable
              value: "{{ .Values.liquibaseEnable }}"
            - name: spring.liquibase.contexts
              value: "{{ .Values.liquibaseContext }}"
            - name: app.actuator.read-query
              value: {{.Values.environment.backend.isAlive.read}}
            - name: app.actuator.write-query
              value: {{.Values.environment.backend.isAlive.write}}
          image: {{ .Values.services.registry}}{{.Values.services.personData.image}}:{{.Values.services.personData.tag }}
          imagePullPolicy: IfNotPresent
          {{- if and (hasKey .Values.services.personData "actuator") (eq (int .Values.actuator) 1) }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: {{.Values.services.personData.actuator.url  }}/health
              port: {{ .Values.services.personData.port }}
              scheme: HTTP
            initialDelaySeconds: {{ .Values.services.personData.actuator.delay | default .Values.services.actuatorDelay}}
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: {{ .Values.services.personData.actuator.url  }}/health/readiness
              port: {{ .Values.services.personData.port }}
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 1
          {{- end }}
          name: {{.Release.Name}}-person-data-service
          ports:
          - containerPort: {{ .Values.services.personData.port }}
            protocol: TCP
          resources:
            limits:
              {{- if hasKey .Values.services.personData "memoryLimit" }}
              memory: {{ .Values.services.personData.memoryLimit }}
              {{- else}}
              memory: 756Mi
              {{- end }}
            requests:
              {{- if hasKey .Values.services.personData "memoryLimit" }}
              memory: {{ .Values.services.personData.memoryLimit }}
              {{- else}}
              memory: 756Mi
              {{- end }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /config
            name: keycloak-conf
            readOnly: true
      dnsPolicy: ClusterFirst
      {{- if hasKey .Values.services "secretRegistry"}}
      imagePullSecrets:
      - name: {{.Values.services.secretRegistry}}
      {{- end }}
      {{- if .Values.istio.ssl.develop }}
      hostAliases:
        - ip: {{.Values.istio.ssl.ip}}
          hostnames:
            - {{.Values.istio.ssl.appHost}}
            - {{.Values.istio.ssl.keycloakHost}}
      {{- end }}
      volumes:
      - configMap:
          defaultMode: 420
          items:
          - key: person-data-application.yml
            path: application.yml
          name: person-data-application
        name: keycloak-conf
  {{- end }}