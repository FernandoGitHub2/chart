{{- if or (eq (int .Values.executionMode) 0) (eq (int .Values.executionMode) 1) (eq (int .Values.executionMode) 2) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-rabbitmq
  namespace: {{ .Values.namespace }}
spec:
  serviceName: {{ .Release.Name }}-rabbitmq
  replicas: {{ .Values.services.rabbitmq.replicas | default "1" }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-rabbitmq
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-rabbitmq
    spec:
      containers:
      - env:
          - name: RABBITMQ_DEFAULT_USER
            valueFrom:
              secretKeyRef:
                key: rabbitUsername
                name: general-secret
          - name: RABBITMQ_DEFAULT_PASS
            valueFrom:
              secretKeyRef:
                key: rabbitPassword
                name: general-secret
        image: {{.Values.services.registry}}{{.Values.services.rabbitmq.image}}:{{.Values.services.rabbitmq.tag}}
        imagePullPolicy: IfNotPresent
        name: {{ .Release.Name }}-rabbitmq
        ports:
        - containerPort: 15672
        - containerPort: 5672
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
      initContainers:
      - name: create-queue
        image: appropriate/curl
        imagePullPolicy: Always
        command:
          - sh
          - '-c'
          - |
            echo "Waiting for RabbitMQ to be up and running..."
            retries=0
            max_retries=30
            until $(curl --output /dev/null --silent --head --fail http://localhost:15672); do
              retries=$((retries + 1))
              if [ "$retries" -gt "$max_retries" ]; then
                echo "Max retries reached, exiting."
                exit 1
              fi
              echo "Waiting for RabbitMQ..."
              sleep 5
            done

            echo "RabbitMQ is up! Creating queue..."
            curl -i -u admin:Byte2024 -H "content-type:application/json" -XPUT -d '{"durable":true}' http://localhost:15672/api/queues/%2f/journal-process-queue
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: pvc-rabbitmq
      {{- if hasKey .Values.services "secretRegistry"}}
      imagePullSecrets:
      - name: {{.Values.services.secretRegistry}}
      {{- end }}
  {{- end }}